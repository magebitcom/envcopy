---
- name: Download project
  shell: "rsync -r -v --progress  -e 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i {{ aws_private_key_path }}' {{ aws_username }}@{{ project }}.stgin.com:/envcopy/project_{{ project }}.tgz ./ > /dev/tty"
  args:
    chdir: "/var/www/{{ project }}/public/"
  become: true

- name: Unarchive project.tgz
  shell: "tar xzvf project_{{ project }}.tgz"
  args: 
    chdir: "/var/www/{{ project }}/public/"
  become: true

- name: Delete project dump
  file:
    path: "/var/www/{{ project }}/public/project_{{ project }}.tgz"
    state: absent

- name: Get media root
  shell: "grep MEDIA_DIR /var/www/{{ project }}/public/.env |  awk -F'=' '{ print $2 }'"
  register: media_root_env

- name: Set fact
  set_fact:
    media_root: "{{ media_root_env.stdout }}"

- name: Get the username running the deploy
  local_action: command whoami
  register: username_on_the_host

- name: Create media root
  file:
    path: "{{ media_root }}"
    state: directory
    recurse: true
    owner: "{{ username_on_the_host.stdout }}"
    group: www-data

- name: Download project media
  shell: "rsync -r -v --progress  -e 'ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -i {{ aws_private_key_path }}' {{ aws_username }}@{{ project }}.stgin.com:/envcopy/media_{{ project }}.tgz ./ > /dev/tty"
  args:
    chdir: "{{ media_root }}/"
  become: true

- name: Unarchive media.tgz
  shell: "tar xzvf media_{{ project }}.tgz"
  args:
    chdir: "{{ media_root }}/"
  become: true

- name: Delete media dump
  file:
    path: "{{ media_root }}/media_{{ project }}.tgz"
    state: absent
